{"ast":null,"code":"import{createContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";export const CartContext=/*#__PURE__*/createContext();export const CartProvider=_ref=>{let{children}=_ref;const[cart,setCart]=useState([]);const addToCart=product=>{setCart(prevCart=>{const existingItem=prevCart.find(item=>item.id===product.id);if(existingItem){return prevCart.map(item=>item.id===product.id?{...item,quantity:item.quantity+1}:item);}return[...prevCart,{...product,quantity:1}];});};const removeFromCart=id=>{setCart(prevCart=>prevCart.filter(item=>item.id!==id));};const updateQuantity=(id,quantity)=>{setCart(prevCart=>prevCart.map(item=>item.id===id?{...item,quantity:Math.max(1,quantity)}:item));};return/*#__PURE__*/_jsx(CartContext.Provider,{value:{cart,addToCart,removeFromCart,updateQuantity},children:children});};","map":{"version":3,"names":["createContext","useState","jsx","_jsx","CartContext","CartProvider","_ref","children","cart","setCart","addToCart","product","prevCart","existingItem","find","item","id","map","quantity","removeFromCart","filter","updateQuantity","Math","max","Provider","value"],"sources":["D:/New tasks(Chatgpt)/react-store-app/src/context/CartContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n\r\n  const addToCart = (product) => {\r\n    setCart((prevCart) => {\r\n      const existingItem = prevCart.find((item) => item.id === product.id);\r\n      if (existingItem) {\r\n        return prevCart.map((item) =>\r\n          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\r\n        );\r\n      }\r\n      return [...prevCart, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (id) => {\r\n    setCart((prevCart) => prevCart.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id, quantity) => {\r\n    setCart((prevCart) =>\r\n      prevCart.map((item) =>\r\n        item.id === id ? { ...item, quantity: Math.max(1, quantity) } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart, updateQuantity }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"AAAA,OAASA,aAAa,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhD,MAAO,MAAM,CAAAC,WAAW,cAAGJ,aAAa,CAAC,CAAC,CAE1C,MAAO,MAAM,CAAAK,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAEpC,KAAM,CAAAS,SAAS,CAAIC,OAAO,EAAK,CAC7BF,OAAO,CAAEG,QAAQ,EAAK,CACpB,KAAM,CAAAC,YAAY,CAAGD,QAAQ,CAACE,IAAI,CAAEC,IAAI,EAAKA,IAAI,CAACC,EAAE,GAAKL,OAAO,CAACK,EAAE,CAAC,CACpE,GAAIH,YAAY,CAAE,CAChB,MAAO,CAAAD,QAAQ,CAACK,GAAG,CAAEF,IAAI,EACvBA,IAAI,CAACC,EAAE,GAAKL,OAAO,CAACK,EAAE,CAAG,CAAE,GAAGD,IAAI,CAAEG,QAAQ,CAAEH,IAAI,CAACG,QAAQ,CAAG,CAAE,CAAC,CAAGH,IACtE,CAAC,CACH,CACA,MAAO,CAAC,GAAGH,QAAQ,CAAE,CAAE,GAAGD,OAAO,CAAEO,QAAQ,CAAE,CAAE,CAAC,CAAC,CACnD,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAC,cAAc,CAAIH,EAAE,EAAK,CAC7BP,OAAO,CAAEG,QAAQ,EAAKA,QAAQ,CAACQ,MAAM,CAAEL,IAAI,EAAKA,IAAI,CAACC,EAAE,GAAKA,EAAE,CAAC,CAAC,CAClE,CAAC,CAED,KAAM,CAAAK,cAAc,CAAGA,CAACL,EAAE,CAAEE,QAAQ,GAAK,CACvCT,OAAO,CAAEG,QAAQ,EACfA,QAAQ,CAACK,GAAG,CAAEF,IAAI,EAChBA,IAAI,CAACC,EAAE,GAAKA,EAAE,CAAG,CAAE,GAAGD,IAAI,CAAEG,QAAQ,CAAEI,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,CAAC,CAAGH,IAClE,CACF,CAAC,CACH,CAAC,CAED,mBACEZ,IAAA,CAACC,WAAW,CAACoB,QAAQ,EAACC,KAAK,CAAE,CAAEjB,IAAI,CAAEE,SAAS,CAAES,cAAc,CAAEE,cAAe,CAAE,CAAAd,QAAA,CAC9EA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}